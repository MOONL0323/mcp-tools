# 生产环境配置
version: '3.8'

services:
  # PostgreSQL 数据库 (生产环境 - 高可用配置)
  postgres-prod:
    image: postgres:15-alpine
    container_name: ai-context-postgres-prod
    environment:
      POSTGRES_DB: ai_context_prod
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./database/prod-config.sql:/docker-entrypoint-initdb.d/prod-config.sql
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c random_page_cost=1.1
      -c temp_file_limit=2GB
      -c log_min_duration_statement=1000
      -c log_connections=on
      -c log_disconnections=on
      -c log_lock_waits=on
    restart: unless-stopped
    networks:
      - ai-context-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL 从库 (读写分离)
  postgres-replica:
    image: postgres:15-alpine
    container_name: ai-context-postgres-replica
    environment:
      PGUSER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MASTER_USER: ${POSTGRES_USER}
      POSTGRES_MASTER_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MASTER_DB: ai_context_prod
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
    depends_on:
      - postgres-prod
    restart: unless-stopped
    networks:
      - ai-context-prod

  # Redis 集群 (生产环境)
  redis-prod:
    image: redis:7-alpine
    container_name: ai-context-redis-prod
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis_prod_data:/data
    restart: unless-stopped
    networks:
      - ai-context-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ChromaDB 向量数据库 (生产环境)
  chromadb-prod:
    image: ghcr.io/chroma-core/chroma:latest
    container_name: ai-context-chromadb-prod
    environment:
      - CHROMA_HOST=0.0.0.0
      - CHROMA_PORT=8000
      - CHROMA_LOG_LEVEL=INFO
      - ANONYMIZED_TELEMETRY=False
      - CHROMA_SERVER_AUTH_CREDENTIALS=${CHROMA_AUTH_TOKEN}
    volumes:
      - chromadb_prod_data:/chroma/chroma
    restart: unless-stopped
    networks:
      - ai-context-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Neo4j 图数据库 (生产环境)
  neo4j-prod:
    image: neo4j:5.15-enterprise
    container_name: ai-context-neo4j-prod
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD}
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_security_procedures_unrestricted: "apoc.*,gds.*"
      NEO4J_dbms_memory_heap_initial__size: 1G
      NEO4J_dbms_memory_heap_max__size: 2G
      NEO4J_dbms_memory_pagecache_size: 1G
      NEO4J_dbms_logs_query_enabled: true
      NEO4J_dbms_logs_query_threshold: 1000ms
      NEO4J_dbms_security_auth__minimum__password__length: 12
      NEO4J_ACCEPT_LICENSE_AGREEMENT: yes
    volumes:
      - neo4j_prod_data:/data
      - neo4j_prod_logs:/logs
      - neo4j_prod_import:/var/lib/neo4j/import
      - neo4j_prod_plugins:/plugins
    restart: unless-stopped
    networks:
      - ai-context-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # MinIO 对象存储 (生产环境 - 分布式)
  minio-prod:
    image: minio/minio:latest
    container_name: ai-context-minio-prod
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BROWSER_REDIRECT_URL: https://minio.${DOMAIN_NAME}
    volumes:
      - minio_prod_data:/data
    restart: unless-stopped
    networks:
      - ai-context-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 后端API服务 (生产环境 - 多实例)
  backend-prod:
    image: ${DOCKER_REGISTRY}/ai-context-backend:${IMAGE_TAG}
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-prod:5432/ai_context_prod
      - DATABASE_REPLICA_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-replica:5432/ai_context_prod
      - REDIS_URL=redis://redis-prod:6379
      - CHROMADB_URL=http://chromadb-prod:8000
      - NEO4J_URI=bolt://neo4j-prod:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - MINIO_ENDPOINT=minio-prod:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - LLM_API_KEY=${LLM_API_KEY}
      - LLM_BASE_URL=${LLM_BASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - SENTRY_DSN=${SENTRY_DSN}
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus_multiproc_dir
    depends_on:
      - postgres-prod
      - redis-prod
      - chromadb-prod
      - neo4j-prod
      - minio-prod
    networks:
      - ai-context-prod
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Celery Worker (异步任务处理)
  celery-worker:
    image: ${DOCKER_REGISTRY}/ai-context-backend:${IMAGE_TAG}
    command: celery -A app.celery worker --loglevel=info --concurrency=4
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-prod:5432/ai_context_prod
      - REDIS_URL=redis://redis-prod:6379
      - CHROMADB_URL=http://chromadb-prod:8000
      - NEO4J_URI=bolt://neo4j-prod:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - LLM_API_KEY=${LLM_API_KEY}
      - LLM_BASE_URL=${LLM_BASE_URL}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    depends_on:
      - postgres-prod
      - redis-prod
    networks:
      - ai-context-prod

  # Celery Beat (定时任务)
  celery-beat:
    image: ${DOCKER_REGISTRY}/ai-context-backend:${IMAGE_TAG}
    command: celery -A app.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-prod:5432/ai_context_prod
      - REDIS_URL=redis://redis-prod:6379
      - ENVIRONMENT=production
    depends_on:
      - postgres-prod
      - redis-prod
    networks:
      - ai-context-prod

  # 前端Web界面 (生产环境 - Nginx)
  frontend-prod:
    image: ${DOCKER_REGISTRY}/ai-context-frontend:${IMAGE_TAG}
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    depends_on:
      - backend-prod
    networks:
      - ai-context-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # MCP Server (生产环境)
  mcp-server-prod:
    image: ${DOCKER_REGISTRY}/ai-context-mcp:${IMAGE_TAG}
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    environment:
      - BACKEND_URL=http://backend-prod:8080
      - NODE_ENV=production
      - LOG_LEVEL=info
    depends_on:
      - backend-prod
    networks:
      - ai-context-prod

  # Nginx 反向代理 (生产环境)
  nginx-prod:
    image: nginx:1.25-alpine
    container_name: ai-context-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend-prod
      - backend-prod
      - mcp-server-prod
    restart: unless-stopped
    networks:
      - ai-context-prod
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Prometheus 监控
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-context-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - ai-context-prod
    restart: unless-stopped

  # Grafana 可视化
  grafana:
    image: grafana/grafana:latest
    container_name: ai-context-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - ai-context-prod
    restart: unless-stopped

  # Jaeger 链路追踪
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: ai-context-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - ai-context-prod
    restart: unless-stopped

volumes:
  postgres_prod_data:
  postgres_replica_data:
  redis_prod_data:
  chromadb_prod_data:
  neo4j_prod_data:
  neo4j_prod_logs:
  neo4j_prod_import:
  neo4j_prod_plugins:
  minio_prod_data:
  nginx_logs:
  prometheus_data:
  grafana_data:

networks:
  ai-context-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16